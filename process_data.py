from math import pi, sqrt, atan, floor, cos
import numpy as np
from scipy.interpolate import UnivariateSpline # v0.19.1 must be used or else ValueError will be raised ("x must be increasing if s > 0")


#
# PROCESS RAW DATA
#

length_of_arm = (0.824, 0.001/0.824)
width_of_arm = (0.0552, 0.0005/0.0552)
diagonal_of_half_arm = (sqrt( (length_of_arm[0]/2)**2 + (width_of_arm[0]/2)**2 ), 0.5 * (2 * length_of_arm[1] + 2 * width_of_arm[1])  )
phi = (atan( (width_of_arm[0]/2) / (length_of_arm[0]/2) ), 0.5 * width_of_arm[1] + 0.5 * length_of_arm[1])

n = 100000
period = []

#
# TRIAL 1
#

trial_1_data = np.array([[0.0, 0.0], [0.25, 0.11], [0.25, 0.41], [0.25, 0.88], [0.5, 1.5], [0.5, 2.18], [0.75, 2.87], [0.75, 3.64], [1.0, 4.8], [1.0, 5.4], [1.5, 6.97], [1.5, 7.86], [1.75, 8.58], [1.75, 9.38], [2.0, 10.47], [2.0, 11.07], [2.25, 12.01], [2.5, 12.83], [2.5, 13.78], [2.75, 14.41], [2.75, 15.43], [3.0, 15.74], [3.0, 16.51], [3.25, 16.97], [3.25, 17.78], [3.25, 17.92], [3.75, 20.37], [4.25, 23.7], [4.75, 25.74], [5.75, 30.23], [6.25, 32.48], [6.5, 34.59], [7.0, 35.95], [7.5, 38.28], [7.75, 39.81], [8.25, 41.42], [8.75, 43.34], [9.25, 44.86], [9.75, 46.15], [10.0, 47.71], [10.5, 48.88], [10.75, 49.62], [11.25, 50.35], [11.5, 51.33], [12.25, 52.53], [13.0, 53.77], [14.0, 55.11], [14.5, 55.91], [14.75, 56.12], [15.0, 56.09], [15.25, 56.13], [15.25, 56.03], [15.5, 56.24], [15.75, 56.3], [16.0, 56.58], [16.25, 56.8], [16.75, 57.07], [17.25, 57.34], [17.75, 57.45], [18.0, 57.68], [18.5, 57.88], [19.25, 57.83], [20.0, 58.16], [20.5, 57.93], [21.0, 58.13], [21.25, 58.05], [21.75, 58.05], [22.0, 57.9], [22.25, 57.81], [22.75, 57.84], [23.0, 57.81], [23.25, 57.78], [23.75, 57.76], [24.25, 57.71], [24.5, 57.58], [24.75, 57.48], [25.25, 57.3], [25.5, 57.19], [25.75, 56.98], [26.0, 56.74], [26.25, 56.43], [26.5, 55.94], [26.75, 55.77], [27.0, 55.78], [27.25, 55.55], [27.5, 55.5], [28.25, 55.38], [29.25, 54.0], [29.5, 52.36], [30.5, 52.13], [30.75, 50.52], [31.5, 49.5], [32.25, 47.31], [32.75, 45.68], [33.25, 43.57], [33.75, 41.0], [34.25, 38.12], [35.5, 34.63], [35.75, 32.84], [36.25, 30.84], [37.0, 28.35], [37.25, 26.26], [37.75, 24.3], [38.25, 22.65], [38.5, 21.2], [39.0, 19.47], [39.25, 17.36], [39.75, 15.27], [40.25, 12.64], [40.5, 11.11], [41.0, 8.6], [41.5, 5.9], [42.25, 2.32], [42.25, 1.63], [42.75, -0.85], [42.75, -1.91], [43.25, -3.52], [43.5, -5.34], [44.0, -7.92], [44.25, -9.03], [44.5, -10.13], [44.5, -11.25], [45.0, -12.82], [45.25, -13.76], [46.0, -17.43], [46.0, -18.42], [46.5, -21.14], [47.25, -23.91], [47.75, -26.51], [48.5, -29.7], [49.0, -31.57], [49.5, -33.66], [50.25, -36.76], [50.75, -38.15], [51.25, -38.77], [52.0, -40.93], [52.75, -43.15], [53.5, -44.83], [54.25, -46.91], [54.75, -48.08], [55.5, -49.33], [56.0, -50.54], [56.5, -51.31], [56.5, -52.11], [56.75, -52.21], [57.5, -52.99], [58.25, -53.91], [59.25, -54.5], [60.5, -54.93], [61.0, -54.89], [61.75, -55.11], [62.25, -55.19], [63.0, -55.05], [63.25, -55.34], [63.75, -55.14], [65.5, -55.19], [67.0, -54.87], [68.5, -54.39], [69.0, -54.06], [70.25, -53.56], [71.0, -52.96], [72.0, -52.24], [72.5, -51.67], [73.75, -50.62], [74.0, -50.18], [76.5, -46.2], [77.25, -44.59], [77.75, -43.24], [78.25, -41.73], [78.75, -40.36], [79.25, -38.44], [79.75, -36.99], [80.5, -33.42], [81.25, -31.15], [82.0, -26.99], [82.5, -24.75], [83.0, -22.82]])
x1 = trial_1_data[:,0] # Difference in angular displacements (degrees)
y1 = trial_1_data[:,1] # Scale reading (grams)

x1 *= 0.0174533 # Convert degrees to radians
y1 = diagonal_of_half_arm[0] * (y1 * 0.00981) / cos(phi[0]) # Convert scale reading to torque
w1 = np.isnan(y1)
y1[w1] = 0

spl1 = UnivariateSpline(x1, y1, s=0.0004, w=~w1)
xs1 = np.linspace(0, np.pi/2, n)

# Truncate interpolation
cutoff_index_1 = 0
for i in range(floor(3*n/4), n):
    if spl1(xs1[i]) >= 0:
        cutoff_index_1 += 1
cutoff_index_1 -= 1
period.append(xs1[:-cutoff_index_1][-1])

# Trial 2

trial_2_data = np.array([[0.0, 0.0], [0.25, 0.14], [0.25, 0.51], [0.5, 0.98], [0.75, 1.55], [0.75, 2.34], [1.0, 3.05], [1.0, 3.67], [1.0, 4.86], [1.25, 5.41], [1.5, 7.09], [1.5, 7.95], [1.75, 8.67], [1.75, 9.41], [2.0, 10.58], [2.0, 11.16], [2.25, 12.15], [2.75, 12.93], [2.75, 13.86], [2.75, 14.45], [2.75, 15.56], [3.0, 15.85], [3.0, 16.62], [3.25, 17.15], [3.5, 17.97], [3.5, 18.08], [4.0, 20.44], [4.25, 23.71], [4.75, 25.82], [5.75, 30.29], [6.25, 32.65], [6.5, 34.75], [7.0, 36.01], [7.75, 38.46], [7.75, 39.89], [8.25, 41.49], [9.0, 43.46], [9.25, 44.93], [9.75, 46.35], [10.0, 47.89], [10.5, 48.93], [10.75, 49.8], [11.25, 50.42], [11.5, 51.36], [12.25, 52.71], [13.0, 53.81], [14.0, 55.15], [14.5, 56.11], [15.0, 56.18], [15.0, 56.22], [15.25, 56.27], [15.25, 56.06], [15.75, 56.43], [15.75, 56.38], [16.0, 56.59], [16.25, 56.85], [16.75, 57.09], [17.5, 57.44], [17.75, 57.58], [18.25, 57.81], [18.5, 58.04], [19.5, 57.95], [20.0, 58.21], [20.5, 58.04], [21.0, 58.31], [21.25, 58.12], [21.75, 58.23], [22.0, 58.06], [22.25, 57.86], [22.75, 57.95], [23.0, 57.96], [23.25, 57.92], [24.0, 57.88], [24.25, 57.89], [24.5, 57.73], [25.0, 57.54], [25.25, 57.38], [25.5, 57.2], [25.75, 57.12], [26.25, 56.8], [26.25, 56.48], [26.5, 56.02], [27.0, 55.84], [27.0, 55.86], [27.25, 55.63], [27.75, 55.55], [28.25, 55.52], [29.25, 54.18], [29.75, 52.5], [30.5, 52.2], [30.75, 50.56], [31.75, 49.62], [32.25, 47.35], [32.75, 45.73], [33.25, 43.69], [33.75, 41.18], [34.25, 38.19], [35.5, 34.69], [35.75, 32.92], [36.25, 30.91], [37.0, 28.53], [37.25, 26.31], [38.0, 24.38], [38.25, 22.78], [38.5, 21.3], [39.0, 19.54], [39.25, 17.41], [39.75, 15.42], [40.25, 12.71], [40.75, 11.29], [41.25, 8.69], [41.5, 6.0], [42.25, 2.45], [42.25, 1.77], [42.75, 0.71], [43.0, 0.23], [43.25, -0.87], [43.5, -1.93], [44.25, -3.53], [44.25, -5.37], [44.5, -8.02], [44.5, -9.21], [45.0, -10.14], [45.25, -11.38], [46.0, -12.97], [46.25, -13.9], [46.75, -17.56], [47.25, -18.43], [47.75, -21.29], [48.75, -24.07], [49.0, -26.65], [49.5, -29.77], [50.25, -31.59], [50.75, -33.69], [51.25, -36.91], [52.0, -38.24], [53.0, -38.88], [53.75, -41.08], [54.25, -43.21], [54.75, -44.94], [55.5, -46.96], [56.25, -48.14], [56.5, -49.33], [56.75, -50.56], [56.75, -51.33], [57.5, -52.16], [58.25, -52.24], [59.5, -53.01], [60.75, -53.99], [61.0, -54.7], [61.75, -55.03], [62.25, -54.99], [63.0, -55.26], [63.25, -55.36], [63.75, -55.25], [65.5, -55.41], [67.25, -55.2], [68.75, -55.31], [69.0, -55.0], [70.25, -54.5], [71.25, -54.22], [72.0, -53.64], [72.5, -53.05], [73.75, -52.32], [74.25, -51.8], [76.5, -50.66], [77.25, -50.27], [78.0, -46.35], [78.25, -44.64], [78.75, -43.42], [79.25, -41.85], [79.75, -40.37], [80.5, -38.51], [81.0, -37.09], [81.25, -33.57], [81.5, -31.21]])
x2 = trial_2_data[:,0] # Difference in angular displacements (degrees)
y2 = trial_2_data[:,1] # Scale reading (grams)

x2 *= 0.0174533 # Convert degrees to radians
y2 = diagonal_of_half_arm[0] * (y2 * 0.00981) / cos(phi[0]) # Convert scale reading to torque
w2 = np.isnan(y2)
y2[w2] = 0

spl2 = UnivariateSpline(x2, y2, s=0.002, w=~w2)
xs2 = np.linspace(0, np.pi/2, n)

# Truncate interpolation
cutoff_index_2 = 0
for i in range(floor(3*n/4), n):
    if spl2(xs2[i]) > 0:
        cutoff_index_2 += 1
cutoff_index_2 -= 1
period.append(xs2[:-cutoff_index_2][-1])

# Trial 3

trial_3_data = np.array([[0.0, 0.0], [0.25, 0.17], [0.25, 0.49], [0.5, 0.88], [0.75, 1.51], [0.75, 2.26], [1.0, 3.16], [1.0, 3.7], [1.0, 4.98], [1.25, 5.59], [1.5, 7.2], [1.75, 8.02], [2.0, 8.82], [2.0, 9.56], [2.0, 10.73], [2.25, 11.21], [2.5, 12.18], [2.75, 13.04], [2.75, 13.98], [3.0, 14.54], [3.0, 15.68], [3.25, 16.02], [3.25, 16.8], [3.5, 17.19], [3.5, 18.16], [3.5, 18.15], [4.0, 20.53], [4.25, 23.82], [5.0, 25.98], [6.0, 30.47], [6.25, 32.8], [6.5, 34.77], [7.0, 36.01], [7.75, 38.64], [8.0, 39.98], [8.5, 41.52], [9.0, 43.5], [9.5, 45.1], [10.0, 46.42], [10.0, 47.92], [10.5, 49.05], [11.0, 49.9], [11.5, 50.56], [11.5, 51.5], [12.5, 52.83], [13.25, 53.86], [14.0, 55.16], [14.75, 56.16], [15.0, 56.3], [15.0, 56.32], [15.5, 56.36], [15.5, 56.19], [16.0, 56.52], [15.75, 56.52], [16.0, 56.68], [16.5, 56.87], [17.0, 57.28], [17.5, 57.63], [17.75, 57.73], [18.5, 58.0], [18.5, 58.05], [19.5, 58.1], [20.25, 58.21], [20.5, 58.06], [21.0, 58.35], [21.25, 58.29], [22.0, 58.24], [22.25, 58.13], [22.5, 58.04], [22.75, 58.0], [23.0, 57.98], [23.25, 57.95], [24.0, 58.06], [24.5, 58.09], [24.5, 57.86], [25.0, 57.59], [25.25, 57.41], [25.5, 57.2], [25.75, 57.25], [26.25, 56.8], [26.5, 56.62], [26.5, 56.18], [27.0, 55.98], [27.0, 55.94], [27.5, 55.76], [27.75, 55.57], [28.5, 55.58], [29.5, 54.36], [29.75, 52.69], [30.5, 52.3], [31.0, 50.64], [32.0, 49.73], [32.25, 47.44], [33.0, 45.8], [33.25, 43.83], [33.75, 41.26], [34.25, 38.25], [35.75, 34.72], [35.75, 33.08], [36.5, 31.09], [37.0, 28.62], [37.5, 26.39], [38.0, 24.48], [38.25, 22.82], [38.5, 21.43], [39.0, 19.63], [39.5, 17.54], [40.0, 15.52], [40.5, 12.74], [41.0, 11.32], [41.25, 8.87], [41.5, 6.17], [42.5, 2.62], [42.5, 1.79], [43.0, 0.83], [43.25, -0.94], [43.25, -2.05], [43.5, -3.54], [44.5, -5.48], [44.25, -7.99], [44.5, -9.05], [44.75, -10.24], [45.0, -11.44], [45.25, -12.92], [46.0, -13.8], [46.25, -17.5], [47.0, -18.45], [47.5, -21.16], [47.75, -24.05], [48.75, -26.55], [49.25, -29.79], [49.5, -31.7], [50.5, -33.73], [51.0, -36.92], [51.25, -38.26], [52.0, -38.88], [53.25, -41.05], [54.0, -43.2], [54.5, -44.94], [55.0, -46.93], [55.5, -48.17], [56.25, -49.52], [56.5, -50.66], [56.75, -51.51], [56.75, -52.27], [57.5, -52.37], [58.25, -53.05], [59.5, -54.1], [60.75, -54.6], [61.0, -54.96], [61.75, -55.09], [62.5, -55.28], [63.0, -55.31], [63.5, -55.22], [63.75, -55.43], [65.75, -55.14], [67.25, -55.36], [68.75, -55.02], [69.0, -54.46], [70.25, -54.17], [71.25, -53.73], [72.25, -53.12], [72.5, -52.36], [73.75, -51.78], [74.25, -50.66], [76.5, -50.21], [77.5, -46.23], [78.25, -44.71], [78.5, -43.36], [78.75, -41.79], [79.5, -40.4], [79.75, -38.51], [80.5, -37.15], [81.5, -33.42], [82.0, -31.32], [82.5, -27.01]])
x3 = trial_3_data[:,0] # Difference in angular displacements (degrees)
y3 = trial_3_data[:,1] # Scale reading (grams)

x3 *= 0.0174533 # Convert degrees to radians
y3 = diagonal_of_half_arm[0] * (y3 * 0.00981) / cos(phi[0]) # Convert scale reading to torque
w3 = np.isnan(y3)
y3[w3] = 0

spl3 = UnivariateSpline(x3, y3, s=0.0015, w=~w3)
xs3 = np.linspace(0, np.pi/2, n)

# Truncate interpolation
cutoff_index_3 = 0
for i in range(floor(3*n/4), n):
    if spl3(xs3[i]) > 0:
        cutoff_index_3 += 1
cutoff_index_3 -= 1
period.append(xs3[:-cutoff_index_3][-1])

average_period = sum(period)/float(len(period))
period_unc = round((max(period) - min(period)) / 2, 2)

print(average_period)
print(period_unc)